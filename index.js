const axios = require('axios');
const { Telegraf } = require("telegraf");

// api bybit
const realMarket = 'https://api.bybit.com/v5/market/tickers?category=spot'

// telegram bot token
const bot = new Telegraf("6980108221:AAFpruw1d_zh7lh7yNttK4sjfUFt3qbadnk");

  // Start bot and buttons
  bot.command("start", (ctx) => {
    ctx.reply(`<b>–ü—Ä–∏–≤–µ—Ç‚ùóÔ∏è</b> \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ø 10 –º–æ–Ω–µ—Ç –ø–æ —Ä–æ—Å—Ç—É –∏ –ø–∞–¥–µ–Ω–∏—é‚ùóÔ∏è \n\n<b>‚¨ÜÔ∏è Long</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç –ª—É—á—à–∏—Ö –ø–æ —Ä–æ—Å—Ç—É. \n\n<b>‚¨áÔ∏è Short</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç –ª—É—á—à–∏—Ö –ø–æ –ø–∞–¥–µ–Ω–∏—é. \n\n<b>Donate üòâ</b> ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞.`, {
      reply_markup: {
        keyboard: [
          [{ text: "‚¨ÜÔ∏è Long" }, { text: "‚¨áÔ∏è Short" }],
          [{ text: "üòâ Donate" }],
        ],
        resize_keyboard: true,        
      },
      parse_mode: 'HTML',
    });
    
  });
  
 // Long button
  bot.hears("‚¨ÜÔ∏è Long", async (ctx) => {            
    async function getPriceCoints() {    
      try {
        const response = await axios.get(realMarket);
        let arrCoinsPrecent = response.data.result.list;
        arrCoinsPrecent.sort((a, b) => b.price24hPcnt.localeCompare(a.price24hPcnt));              
        let listCoins = arrCoinsPrecent.slice(0,10);        
        let coinSymbol = '';        
        for (let i = 0; i < listCoins.length; i++) {          
          coinSymbol += listCoins[i].symbol + ' ' + '‚Äî' + ' ' + '<b>' + (listCoins[i].price24hPcnt * 100) + '</b>' + '\n';          
        };             
        return coinSymbol;
      } catch (error) {
        console.error(error);
      }      
    };  
    let topCoins = await getPriceCoints();
    ctx.reply(topCoins, {
      parse_mode: 'HTML',
    });
  });

  // Short button
  bot.hears("‚¨áÔ∏è Short", async (ctx) => {
    async function getPriceCoints() {    
      try {
        const response = await axios.get(realMarket);
        let arrCoinsPrecent = response.data.result.list;
        arrCoinsPrecent.sort((a, b) => a.price24hPcnt - b.price24hPcnt)            
        let listCoins = arrCoinsPrecent.slice(0,10);        
        let coinSymbol = '';        
        for (let i = 0; i < listCoins.length; i++) {          
          coinSymbol += listCoins[i].symbol + ' ' + '‚Äî' + ' ' + '<b>' + (listCoins[i].price24hPcnt * 100) + '</b>' + '\n';          
        };        
        return coinSymbol;
      } catch (error) {
        console.error(error);
      }      
    };  
    let topCoins = await getPriceCoints();
    ctx.reply(topCoins, {
      parse_mode: 'HTML',
    });
  });

  // Donate button
  bot.hears("üòâ Donate", (ctx) => {
    ctx.reply(`BTC ‚Äî <code>15iCnFxYhh2yHXCRzLUSp375rszwrA2dKC</code> \n\nUSDT ‚Äî <code>TZBn2NsyA32ShmD2QV7NQF5rCoUWJTYcHH</code> \n\nETH ‚Äî <code>0x920c837D7368A49064eB0D9e6e95654100f14dB8</code>  \n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É‚ùóÔ∏è –í—ã –ª—É—á—à–∏–µ‚ùóÔ∏è`, {
      parse_mode: 'HTML',
    });
  });
  
 
  

  // Start bot
  bot.launch();

